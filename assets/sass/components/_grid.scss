/*  
================================================================
RESPONSIVE BREAKPOINTS
================================================================  
*/



$sm: sm, 600px;  
$md: md, 768px;  
$lg: lg, 1000px;  
$xl: xl, 1200px; 
$xxl: xxl, 1600px; 



/*  
================================================================
Variables and Mixins
================================================================  
*/

@import "../mixins/_flex";


// Set the number of columns
$flexboxgrid-grid-columns: 12 !default;

// Set the gutter between columns.
$flexboxgrid-gutter-width: 3px !default;

// Set margin for the container sides.
$flexboxgrid-outer-margin: 12px !default;

// Set gutters
$gutter-compensation: $flexboxgrid-gutter-width * .5 * -1;
$half-gutter-width: $flexboxgrid-gutter-width * .5;

// Max wrapper width
$flexboxgrid-max-width: 1440px !default;



@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;

  // split @include flex(0, 0, auto) into individual props
  @include flex-grow(0);
  @include flex-shrink(0);


  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}



/*  
================================================================
GRID
================================================================  
*/

.wrapper {
  box-sizing: border-box;
  margin: 0 auto;
  padding-right: $flexboxgrid-outer-margin;
  padding-left: $flexboxgrid-outer-margin;
}

.full-width{
  box-sizing: border-box;
  margin: 0 auto;
  padding-left:0;
  padding-right: 0; 
}

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $flexboxgrid-outer-margin;
  padding-left: $flexboxgrid-outer-margin;
}

.row {
  box-sizing: border-box;
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.grid{
  display: flex;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.row.reverse {
  @include flex-direction(row-reverse);
}

.col.reverse {
  @include flex-direction(column-reverse);
}




/*  
================================================================
XSâ€“GRID
================================================================  
*/



$name: xs;

.col-#{$name} {
  @include flexboxgrid-sass-col-common;
  @include flex-basis(auto);
}
@for $i from 1 through $flexboxgrid-grid-columns {
  .col-#{$name}-#{$i} {
    @include flexboxgrid-sass-col-common;
    @include flex-basis(100% / $flexboxgrid-grid-columns * $i);
    width: 100% / $flexboxgrid-grid-columns * $i;
  }
}
@for $i from 0 through $flexboxgrid-grid-columns {
  .col-#{$name}-offset-#{$i} {
    @include flexboxgrid-sass-col-common;
    @if $i == 0 {
      margin-left: 0;
    } @else {
      margin-left: 100% / $flexboxgrid-grid-columns * $i;
    }
  }
}
.col-#{$name} {
  @include flex-grow(1);
  @include flex-basis(0);
  max-width: 100%;
}
.start-#{$name} {
  @include justify-content(flex-start);
  text-align: left;
}

.center-#{$name} {
  @include justify-content(center);
  text-align: center;
}

.end-#{$name} {
  @include justify-content(flex-end);
  text-align: right;
}

.top-#{$name} {
  @include align-items(flex-start);
}

.middle-#{$name} {
  @include align-items(center);
}

.bottom-#{$name} {
  @include align-items(flex-end);
}

.around-#{$name} {
  @include justify-content(space-around);
}

.between-#{$name} {
  @include justify-content(space-between);
}

.first-#{$name} {
  order: -1;
}

.last-#{$name} {
  order: 1;
}


/*  
================================================================
UTILITY CLASSES
================================================================  
*/


.#{$name}-visuallyhidden { 
  position: absolute; 
  overflow: hidden; 
  clip: rect(0 0 0 0); 
  height: 1px; width: 1px; 
  margin: -1px; padding: 0; border: 0; 
}

.#{$name}-visible { 
  position: inherit; 
  overflow: visible; 
  clip: auto; 
  height: auto; width: auto; 
}

.#{$name}-hide {
   display: none;
}

.#{$name}-show {
   display: inline-block;
}
